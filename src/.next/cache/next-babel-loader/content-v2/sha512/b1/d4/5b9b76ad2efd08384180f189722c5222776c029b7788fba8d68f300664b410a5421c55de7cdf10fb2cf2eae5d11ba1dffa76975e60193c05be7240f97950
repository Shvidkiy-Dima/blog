{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/borisov/PycharmProjects/startups/personal_blog/src/pages/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { serialize } from 'next-mdx-remote/serialize';\nimport { MDXRemote } from 'next-mdx-remote';\nexport default function TestPage({\n  source\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: /*#__PURE__*/_jsxDEV(MDXRemote, _objectSpread({}, source), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticProps() {\n  // MDX text - can be from a local file, database, anywhere\n  const source = 'Some **mdx** text, with a componen';\n  const mdxSource = await serialize(source);\n  return {\n    props: {\n      source: mdxSource\n    }\n  };\n}","map":{"version":3,"sources":["/home/borisov/PycharmProjects/startups/personal_blog/src/pages/index.js"],"names":["serialize","MDXRemote","TestPage","source","getStaticProps","mdxSource","props"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,2BAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAGA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA8B;AAC3C,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACE,QAAC,SAAD,oBAAeA,MAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;AAED,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMD,MAAM,GAAG,oCAAf;AACA,QAAME,SAAS,GAAG,MAAML,SAAS,CAACG,MAAD,CAAjC;AACA,SAAO;AAAEG,IAAAA,KAAK,EAAE;AAAEH,MAAAA,MAAM,EAAEE;AAAV;AAAT,GAAP;AACD","sourcesContent":["import { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote } from 'next-mdx-remote'\n\n\nexport default function TestPage({ source }) {\n  return (\n    <div className=\"wrapper\">\n      <MDXRemote {...source}  />\n    </div>\n  )\n}\n\nexport async function getStaticProps() {\n  // MDX text - can be from a local file, database, anywhere\n  const source = 'Some **mdx** text, with a componen'\n  const mdxSource = await serialize(source)\n  return { props: { source: mdxSource } }\n}"]},"metadata":{},"sourceType":"module"}