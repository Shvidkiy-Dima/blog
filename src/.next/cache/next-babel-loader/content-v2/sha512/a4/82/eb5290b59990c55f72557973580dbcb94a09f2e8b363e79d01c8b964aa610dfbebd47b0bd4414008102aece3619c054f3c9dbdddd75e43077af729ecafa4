{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/borisov/PycharmProjects/startups/personal_blog/src/pages/posts/[post].js\";\nimport renderToString from \"next-mdx-remote/render-to-string\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\nconst components = {\n  InstagramEmbed,\n  YouTube,\n  TwitterTweetEmbed\n};\n\nconst slugToPostContent = (postContents => {\n  let hash = {};\n  postContents.forEach(it => hash[it.slug] = it);\n  return hash;\n})(fetchPostContent());\n\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source\n}) {\n  const content = hydrate(source, {\n    components\n  });\n  return /*#__PURE__*/_jsxDEV(PostLayout, {\n    title: title,\n    date: parseISO(dateString),\n    slug: slug,\n    tags: tags,\n    author: author,\n    description: description,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\nexport async function getStaticPaths() {\n  const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n  return {\n    paths,\n    fallback: false\n  };\n}\n;\nexport async function getStaticProps({\n  params\n}) {\n  const slug = params.post;\n  const source = fs.readFileSync(slugToPostContent[slug].fullPath, \"utf8\");\n  const {\n    content,\n    data\n  } = matter(source, {\n    engines: {\n      yaml: s => yaml.load(s, {\n        schema: yaml.JSON_SCHEMA\n      })\n    }\n  });\n  const mdxSource = await renderToString(content, {\n    components,\n    scope: data\n  });\n  return {\n    props: {\n      title: data.title,\n      dateString: data.date,\n      slug: data.slug,\n      description: \"\",\n      tags: data.tags,\n      author: data.author,\n      source: mdxSource\n    }\n  };\n}\n;","map":{"version":3,"sources":["/home/borisov/PycharmProjects/startups/personal_blog/src/pages/posts/[post].js"],"names":["renderToString","hydrate","matter","fs","yaml","parseISO","PostLayout","InstagramEmbed","YouTube","TwitterTweetEmbed","components","slugToPostContent","postContents","hash","forEach","it","slug","fetchPostContent","Post","title","dateString","tags","author","description","source","content","getStaticPaths","paths","map","fallback","getStaticProps","params","post","readFileSync","fullPath","data","engines","s","load","schema","JSON_SCHEMA","mdxSource","scope","props","date"],"mappings":"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","sourcesContent":["import renderToString from \"next-mdx-remote/render-to-string\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport matter from \"gray-matter\";\nimport fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\n\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\n\nconst components = { InstagramEmbed, YouTube, TwitterTweetEmbed };\n\n\nconst slugToPostContent = (postContents => {\n  let hash = {}\n  postContents.forEach(it => hash[it.slug] = it)\n  return hash;\n})(fetchPostContent());\n\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source,\n}) {\n  const content = hydrate(source, { components })\n  return (\n    <PostLayout\n      title={title}\n      date={parseISO(dateString)}\n      slug={slug}\n      tags={tags}\n      author={author}\n      description={description}\n    >\n      {content}\n    </PostLayout>\n  )\n}\n\nexport async function getStaticPaths () {\n  const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n  return {\n    paths,\n    fallback: false,\n  };\n};\n\nexport async function getStaticProps ({ params }) {\n  const slug = params.post;\n  const source = fs.readFileSync(slugToPostContent[slug].fullPath, \"utf8\");\n  const { content, data } = matter(source, {\n    engines: { yaml: (s) => yaml.load(s, { schema: yaml.JSON_SCHEMA })}\n  });\n  const mdxSource = await renderToString(content, { components, scope: data });\n  return {\n    props: {\n      title: data.title,\n      dateString: data.date,\n      slug: data.slug,\n      description: \"\",\n      tags: data.tags,\n      author: data.author,\n      source: mdxSource\n    },\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}