{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/borisov/PycharmProjects/startups/personal_blog/src/pages/posts/[post].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\nimport { serialize } from 'next-mdx-remote/serialize';\nimport { MDXRemote } from 'next-mdx-remote';\nimport a11yEmoji from '@fec/remark-a11y-emoji';\nimport emoji from 'remark-emoji';\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport axios from \"axios\";\nimport matter from 'gray-matter';\nconst components = {\n  InstagramEmbed,\n  YouTube\n};\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostLayout, {\n      title: title,\n      date: parseISO(dateString),\n      slug: slug,\n      tags: tags,\n      author: author,\n      description: description,\n      children: /*#__PURE__*/_jsxDEV(MDXRemote, _objectSpread(_objectSpread({}, source), {}, {\n        components: components\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"categories\",\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"12\"\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\nexport async function getStaticPaths() {\n  // const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n  const posts = (await axios.get(`http://localhost:8000/api/post/`)).data;\n  const paths = posts.map(post => ({\n    params: {\n      post: post.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}\n;\nexport async function getStaticProps({\n  params\n}) {\n  const slug = params.post;\n  const post = (await axios.get(`http://localhost:8000/api/post/${slug}/`)).data;\n  const {\n    content,\n    data\n  } = matter(post.content2);\n  const mdxSource = await serialize(content, {\n    scope: data,\n    mdxOptions: {\n      remarkPlugins: [[a11yEmoji, {}], [emoji, {}]]\n    }\n  });\n  return {\n    props: {\n      title: post.title,\n      dateString: post.created,\n      slug: post.slug,\n      description: \"\",\n      tags: post.tags,\n      source: mdxSource\n    }\n  };\n}\n;","map":{"version":3,"sources":["/home/borisov/PycharmProjects/startups/personal_blog/src/pages/posts/[post].js"],"names":["parseISO","PostLayout","serialize","MDXRemote","a11yEmoji","emoji","InstagramEmbed","YouTube","axios","matter","components","Post","title","dateString","slug","tags","author","description","source","i","getStaticPaths","posts","get","data","paths","map","post","params","fallback","getStaticProps","content","content2","mdxSource","scope","mdxOptions","remarkPlugins","props","created"],"mappings":"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","sourcesContent":["import { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\n\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote } from 'next-mdx-remote'\nimport a11yEmoji from '@fec/remark-a11y-emoji';\nimport emoji from 'remark-emoji';\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport axios from \"axios\";\nimport matter from 'gray-matter'\n\n\nconst components = { InstagramEmbed, YouTube};\n\n\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source,\n}) {\n  return (\n    <>\n    <PostLayout\n      title={title}\n      date={parseISO(dateString)}\n      slug={slug}\n      tags={tags}\n      author={author}\n      description={description}\n    >\n            <MDXRemote {...source} components={components} />\n    </PostLayout>\n    <ul className={\"categories\"}>\n  \n          <li key={i}>\n           12\n          </li>\n\n      </ul>\n    </>\n  )\n}\n\nexport async function getStaticPaths () {\n  // const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n\n  const posts = (await axios.get(`http://localhost:8000/api/post/`)).data\n  const paths = posts.map((post) => ({\n    params: { post: post.slug },\n  }))\n  return {\n    paths,\n    fallback: false,\n  };\n};\n\nexport async function getStaticProps ({ params }) {\n  const slug = params.post;\n  const post = (await axios.get(`http://localhost:8000/api/post/${slug}/`)).data\n  const { content, data } = matter(post.content2)\n  const mdxSource = await serialize(content, \n    { scope: data,\n      mdxOptions: {\n        remarkPlugins: [[a11yEmoji, {}], [emoji, {}]],\n      },\n  \n  })\n\n  return {\n    props: {\n      title: post.title,\n      dateString: post.created,\n      slug: post.slug,\n      description: \"\",\n      tags: post.tags,\n      source: mdxSource\n    },\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}