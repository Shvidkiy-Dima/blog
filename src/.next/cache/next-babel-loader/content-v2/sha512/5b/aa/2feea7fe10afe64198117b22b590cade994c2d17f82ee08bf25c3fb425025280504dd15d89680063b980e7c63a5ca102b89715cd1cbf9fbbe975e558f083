{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport authors from \"../meta/authors.yml\";\nvar authorMap = generateAuthorMap();\n\nfunction generateAuthorMap() {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(authors.authors),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var author = _step.value;\n      result[author.slug] = author;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nexport function getAuthor(slug) {\n  return authorMap[slug];\n}","map":{"version":3,"sources":["/home/borisov/PycharmProjects/startups/personal_blog/src/lib/authors.js"],"names":["authors","authorMap","generateAuthorMap","result","author","slug","getAuthor"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,qBAApB;AAIA,IAAMC,SAAS,GAAGC,iBAAiB,EAAnC;;AAEA,SAASA,iBAAT,GAA6B;AAC3B,MAAIC,MAAM,GAAI,EAAd;;AAD2B,6CAENH,OAAO,CAACA,OAFF;AAAA;;AAAA;AAE3B,wDAAsC;AAAA,UAA3BI,MAA2B;AACpCD,MAAAA,MAAM,CAACC,MAAM,CAACC,IAAR,CAAN,GAAsBD,MAAtB;AACD;AAJ0B;AAAA;AAAA;AAAA;AAAA;;AAK3B,SAAOD,MAAP;AACD;;AAED,OAAO,SAASG,SAAT,CAAmBD,IAAnB,EAAyB;AAC9B,SAAOJ,SAAS,CAACI,IAAD,CAAhB;AACD","sourcesContent":["import authors from \"../meta/authors.yml\";\n\n\n\nconst authorMap = generateAuthorMap();\n\nfunction generateAuthorMap() {\n  let result  = {};\n  for (const author of authors.authors) {\n    result[author.slug] = author;\n  }\n  return result;\n}\n\nexport function getAuthor(slug) {\n  return authorMap[slug];\n}\n"]},"metadata":{},"sourceType":"module"}